# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

try:
    import dbus_pb2 as dbus__pb2
except:
    import grpctool.dbus_pb2 as dbus__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ConnectionStub(object):
    """set up connection between user and GM
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/dbus.Connection/connect',
                request_serializer=dbus__pb2.ConnectRequest.SerializeToString,
                response_deserializer=dbus__pb2.ConnectResponse.FromString,
                )


class ConnectionServicer(object):
    """set up connection between user and GM
    """

    def connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=dbus__pb2.ConnectRequest.FromString,
                    response_serializer=dbus__pb2.ConnectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbus.Connection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Connection(object):
    """set up connection between user and GM
    """

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbus.Connection/connect',
            dbus__pb2.ConnectRequest.SerializeToString,
            dbus__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RegistrationStub(object):
    """register a DLT Client (DLTC) to the Global Manager (GM)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/dbus.Registration/register',
                request_serializer=dbus__pb2.RegisterRequest.SerializeToString,
                response_deserializer=dbus__pb2.RegisterResponse.FromString,
                )
        self.deregister = channel.unary_unary(
                '/dbus.Registration/deregister',
                request_serializer=dbus__pb2.DeregisterRequest.SerializeToString,
                response_deserializer=dbus__pb2.DeregisterResponse.FromString,
                )


class RegistrationServicer(object):
    """register a DLT Client (DLTC) to the Global Manager (GM)
    """

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=dbus__pb2.RegisterRequest.FromString,
                    response_serializer=dbus__pb2.RegisterResponse.SerializeToString,
            ),
            'deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.deregister,
                    request_deserializer=dbus__pb2.DeregisterRequest.FromString,
                    response_serializer=dbus__pb2.DeregisterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbus.Registration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registration(object):
    """register a DLT Client (DLTC) to the Global Manager (GM)
    """

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbus.Registration/register',
            dbus__pb2.RegisterRequest.SerializeToString,
            dbus__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbus.Registration/deregister',
            dbus__pb2.DeregisterRequest.SerializeToString,
            dbus__pb2.DeregisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CacheMissStub(object):
    """When key is not available, CC request GM to update policy
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.call = channel.unary_unary(
                '/dbus.CacheMiss/call',
                request_serializer=dbus__pb2.CacheMissRequest.SerializeToString,
                response_deserializer=dbus__pb2.CacheMissResponse.FromString,
                )


class CacheMissServicer(object):
    """When key is not available, CC request GM to update policy
    """

    def call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CacheMissServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'call': grpc.unary_unary_rpc_method_handler(
                    servicer.call,
                    request_deserializer=dbus__pb2.CacheMissRequest.FromString,
                    response_serializer=dbus__pb2.CacheMissResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbus.CacheMiss', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CacheMiss(object):
    """When key is not available, CC request GM to update policy
    """

    @staticmethod
    def call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbus.CacheMiss/call',
            dbus__pb2.CacheMissRequest.SerializeToString,
            dbus__pb2.CacheMissResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HeartbeatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.call = channel.unary_unary(
                '/dbus.Heartbeat/call',
                request_serializer=dbus__pb2.HearbeatMessage.SerializeToString,
                response_deserializer=dbus__pb2.HearbeatMessage.FromString,
                )


class HeartbeatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeartbeatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'call': grpc.unary_unary_rpc_method_handler(
                    servicer.call,
                    request_deserializer=dbus__pb2.HearbeatMessage.FromString,
                    response_serializer=dbus__pb2.HearbeatMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbus.Heartbeat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Heartbeat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbus.Heartbeat/call',
            dbus__pb2.HearbeatMessage.SerializeToString,
            dbus__pb2.HearbeatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LoggerStub(object):
    """CC periodically sends log messages tO GM
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.call = channel.stream_unary(
                '/dbus.Logger/call',
                request_serializer=dbus__pb2.LogItem.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LoggerServicer(object):
    """CC periodically sends log messages tO GM
    """

    def call(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoggerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'call': grpc.stream_unary_rpc_method_handler(
                    servicer.call,
                    request_deserializer=dbus__pb2.LogItem.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbus.Logger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Logger(object):
    """CC periodically sends log messages tO GM
    """

    @staticmethod
    def call(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/dbus.Logger/call',
            dbus__pb2.LogItem.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
